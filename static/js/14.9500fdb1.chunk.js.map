{"version":3,"sources":["shared/components/ColoredButton.js","shared/components/Dropzone.js"],"names":["memo","props","color","children","theme","buttonTheme","createTheme","adaptV4Theme","_objectSpread","palette","primary","main","buttonProps","_ref","_objectWithoutProperties","React","createElement","StyledEngineProvider","injectFirst","ThemeProvider","Button","Object","assign","__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_dropzone__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_2__","classnames__WEBPACK_IMPORTED_MODULE_2___default","_mui_material__WEBPACK_IMPORTED_MODULE_3__","_mui_styles_withStyles__WEBPACK_IMPORTED_MODULE_4__","_ColoredButton__WEBPACK_IMPORTED_MODULE_5__","getColor","isDragAccept","isDragReject","success","error","dark","common","black","withStyles","button","borderWidth","borderColor","borderTopLeftRadius","borderBottomLeftRadius","fullHeight","height","withTheme","onDrop","accept","classes","style","_useDropzone","useDropzone","getRootProps","getInputProps","Box","ColoredButton","fullWidth","className","classNames","variant"],"mappings":"4KA8BeA,mBA1Bf,SAAuBC,GAAO,IACpBC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACnBC,EAAcC,YAAYC,YAAYC,YAAA,GACvCJ,EAAK,CACRK,QAAS,CACPC,QAAS,CACPC,KAAMT,QAINU,GAAeC,EAAyCZ,EAAjCY,EAALX,MAAYW,EAALT,MAAeS,EAARV,SAAcW,YAAAD,EAAA,+BAA/B,IAAAA,EACrB,OACEE,IAAAC,cAACC,IAAoB,CAACC,aAAW,GAC/BH,IAAAC,cAACG,IAAa,CAACf,MAAOC,GACpBU,IAAAC,cAACI,IAAMC,OAAAC,OAAA,GAAKV,EAAW,CAAEV,MAAM,YAC5BC,yCCnBXoB,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAAK,EAAAE,GAAAE,EAAAT,EAAA,KAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,KAoBA,SAASY,EAASC,EAAcC,EAAcjC,GAC5C,OAAIgC,EACKhC,EAAMK,QAAQ6B,QAAQ3B,KAE3B0B,EACKjC,EAAMK,QAAQ8B,MAAMC,KAEtBpC,EAAMK,QAAQgC,OAAOC,MA2CfC,sBA9DA,CACbC,OAAQ,CACNC,YAAa,EACbC,YAAa,sBACbC,oBAAqB,EACrBC,uBAAwB,GAE1BC,WAAY,CACVC,OAAQ,SAsDsB,CAAEC,WAAW,GAAhCR,CAxCf,SAAkB1C,GAAO,IACfmD,EAAgEnD,EAAhEmD,OAAQC,EAAwDpD,EAAxDoD,OAAQJ,EAAgDhD,EAAhDgD,WAAY9C,EAAoCF,EAApCE,SAAUmD,EAA0BrD,EAA1BqD,QAASC,EAAiBtD,EAAjBsD,MAAOnD,EAAUH,EAAVG,MAAKoD,EAM/DC,YAAY,CACdJ,OAAQA,EACRD,OAAQA,IANRM,EAAYF,EAAZE,aACAC,EAAaH,EAAbG,cACAvB,EAAYoB,EAAZpB,aACAC,EAAYmB,EAAZnB,aAKF,OACEtB,IAAAC,cAAC4C,IAAGvC,OAAAC,OAAA,GAAKoC,IAAc,CAAER,OAAO,SAC9BnC,IAAAC,cAAA,QAAW2C,KACX5C,IAAAC,cAAC6C,IAAa,CACZC,WAAS,EACTC,UAAWC,IACTf,EAAaK,EAAQL,WAAa,KAClCK,EAAQV,QAEVqB,QAAQ,WACR/D,MAAOiC,EAASC,EAAcC,EAAcjC,GAC5CmD,MAAOA,GAENpD","file":"static/js/14.9500fdb1.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createTheme, ThemeProvider, StyledEngineProvider, adaptV4Theme } from \"@mui/material\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createTheme(adaptV4Theme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  }));\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={buttonTheme}>\n        <Button {...buttonProps} color=\"primary\">\n          {children}\n        </Button>\n      </ThemeProvider>\n    </StyledEngineProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default memo(ColoredButton);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDropzone } from \"react-dropzone\";\nimport classNames from \"classnames\";\nimport { Box } from \"@mui/material\";\nimport withStyles from '@mui/styles/withStyles';\nimport ColoredButton from \"./ColoredButton\";\n\nconst styles = {\n  button: {\n    borderWidth: 1,\n    borderColor: \"rgba(0, 0, 0, 0.23)\",\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  },\n  fullHeight: {\n    height: \"100%\"\n  }\n};\n\nfunction getColor(isDragAccept, isDragReject, theme) {\n  if (isDragAccept) {\n    return theme.palette.success.main;\n  }\n  if (isDragReject) {\n    return theme.palette.error.dark;\n  }\n  return theme.palette.common.black;\n}\n\nfunction Dropzone(props) {\n  const { onDrop, accept, fullHeight, children, classes, style, theme } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: accept,\n    onDrop: onDrop\n  });\n  return (\n    <Box {...getRootProps()} height=\"100%\">\n      <input {...getInputProps()} />\n      <ColoredButton\n        fullWidth\n        className={classNames(\n          fullHeight ? classes.fullHeight : null,\n          classes.button\n        )}\n        variant=\"outlined\"\n        color={getColor(isDragAccept, isDragReject, theme)}\n        style={style}\n      >\n        {children}\n      </ColoredButton>\n    </Box>\n  );\n}\n\nDropzone.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  onDrop: PropTypes.func,\n  accept: PropTypes.string,\n  fullHeight: PropTypes.bool,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n};\n\nexport default withStyles(styles, { withTheme: true })(Dropzone);\n"],"sourceRoot":""}