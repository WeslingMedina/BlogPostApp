{"version":3,"sources":["shared/components/CardChart.js"],"names":["labelFormatter","label","format","Date","calculateMin","data","yKey","factor","max","Number","POSITIVE_INFINITY","forEach","element","Math","round","itemHeight","options","withStyles","theme","cardContentInner","marginTop","spacing","withTheme","props","color","title","classes","height","_useState","useState","_useState2","_slicedToArray","anchorEl","setAnchorEl","_useState3","_useState4","selectedOption","setSelectedOption","handleClick","useCallback","event","currentTarget","formatter","value","getSubtitle","Error","processData","seconds","minSeconds","arr","i","length","timestamp","unshift","handleClose","selectOption","isOpen","Boolean","React","createElement","Card","Box","pt","px","pb","display","justifyContent","Typography","variant","IconButton","aria-label","aria-owns","undefined","aria-haspopup","onClick","size","MoreVertIcon","Menu","id","open","onClose","PaperProps","style","maxHeight","width","disableScrollLock","map","option","MenuItem","key","selected","name","CardContent","className","ResponsiveContainer","AreaChart","type","XAxis","dataKey","domain","hide","YAxis","Area","stroke","fill","Tooltip","cursor","contentStyle","border","padding","borderRadius","shape","boxShadow","shadows","labelStyle","typography","body1","itemStyle","fontSize","letterSpacing","fontFamily","lineHeight","fontWeight"],"mappings":"sRAqBA,SAASA,EAAeC,GACtB,OAAOC,YAAO,IAAIC,KAAa,IAARF,GAAe,kBAGxC,SAASG,EAAaC,EAAMC,EAAMC,GAChC,IAAIC,EAAMC,OAAOC,kBAMjB,OALAL,EAAKM,QAAQ,SAACC,GACRJ,EAAMI,EAAQN,KAChBE,EAAMI,EAAQN,MAGXO,KAAKC,MAAMN,EAAMA,EAAMD,GAGhC,IAAMQ,EAAa,IACbC,EAAU,CAAC,SAAU,UAAW,YAgLvBC,sBArMA,SAACC,GAAK,MAAM,CACzBC,iBAAkB,CAChBC,UAAWF,EAAMG,SAAS,MAmMI,CAAEC,WAAW,GAAhCL,CA9Kf,SAAmBM,GAAO,IAChBC,EAA+CD,EAA/CC,MAAOnB,EAAwCkB,EAAxClB,KAAMoB,EAAkCF,EAAlCE,MAAOC,EAA2BH,EAA3BG,QAASR,EAAkBK,EAAlBL,MAAOS,EAAWJ,EAAXI,OAAMC,EAClBC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAAvCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAAAI,EACgBL,mBAAS,WAAUM,EAAAJ,YAAAG,EAAA,GAAxDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAElCG,EAAcC,sBAClB,SAACC,GACCP,EAAYO,EAAMC,gBAEpB,CAACR,IAGGS,EAAYH,sBAChB,SAACI,GACC,MAAO,CAACA,EAAOlB,IAEjB,CAACA,IAGGmB,EAAcL,sBAAY,WAC9B,OAAQH,GACN,IAAK,SACH,MAAO,YACT,IAAK,UACH,MAAO,aACT,IAAK,WACH,MAAO,gBACT,QACE,MAAM,IAAIS,MAAM,4CAEnB,CAACT,IAEEU,EAAcP,sBAAY,WAC9B,IAAIQ,EACJ,OAAQX,GACN,IAAK,SACHW,EAAU,OACV,MACF,IAAK,UACHA,EAAU,QACV,MACF,IAAK,WACHA,EAAU,SACV,MACF,QACE,MAAM,IAAIF,MAAM,0CAIpB,IAFA,IAAMG,EAAa,IAAI7C,KAAS,IAAO4C,EACjCE,EAAM,GACHC,EAAI,EAAGA,EAAI7C,EAAK8C,OAAQD,GAAK,EAChCF,EAAa3C,EAAK6C,GAAGE,WACvBH,EAAII,QAAQhD,EAAK6C,IAGrB,OAAOD,GACN,CAAC5C,EAAM+B,IAEJkB,EAAcf,sBAAY,WAC9BN,EAAY,OACX,CAACA,IAEEsB,EAAehB,sBACnB,SAACH,GACCC,EAAkBD,GAClBkB,KAEF,CAACjB,EAAmBiB,IAGhBE,EAASC,QAAQzB,GACvB,OACE0B,IAAAC,cAACC,IAAI,KACHF,IAAAC,cAACE,IAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACrBN,IAAAC,cAACE,IAAG,CAACI,QAAQ,OAAOC,eAAe,iBACjCR,IAAAC,cAAA,WACED,IAAAC,cAACQ,IAAU,CAACC,QAAQ,aAAa3C,GACjCiC,IAAAC,cAACQ,IAAU,CAACC,QAAQ,QAAQ5C,MAAM,iBAC/BoB,MAGLc,IAAAC,cAAA,WACED,IAAAC,cAACU,IAAU,CACTC,aAAW,OACXC,YAAWf,EAAS,iBAAcgB,EAClCC,gBAAc,OACdC,QAASpC,EACTqC,KAAK,SACLjB,IAAAC,cAACiB,IAAY,OAEflB,IAAAC,cAACkB,IAAI,CACHC,GAAG,YACH9C,SAAUA,EACV+C,KAAMvB,EACNwB,QAAS1B,EACT2B,WAAY,CACVC,MAAO,CACLC,UAAWpE,EACXqE,MAAO,MAGXC,mBAAiB,GAEhBrE,EAAQsE,IAAI,SAACC,GAAM,OAClB7B,IAAAC,cAAC6B,IAAQ,CACPC,IAAKF,EACLG,SAAUH,IAAWnD,EACrBsC,QAAS,WACPnB,EAAagC,IAEfI,KAAMJ,GAELA,SAOb7B,IAAAC,cAACiC,IAAW,KACVlC,IAAAC,cAACE,IAAG,CAACgC,UAAWnE,EAAQP,iBAAkBQ,OAAQA,GAChD+B,IAAAC,cAACmC,IAAmB,CAACV,MAAM,OAAOzD,OAAO,QACvC+B,IAAAC,cAACoC,IAAS,CAAC1F,KAAMyC,IAAekD,KAAK,UACnCtC,IAAAC,cAACsC,IAAK,CACJC,QAAQ,YACRF,KAAK,SACLG,OAAQ,CAAC,UAAW,WACpBC,MAAI,IAEN1C,IAAAC,cAAC0C,IAAK,CACJF,OAAQ,CAAC/F,EAAaC,EAAM,QAAS,KAAO,WAC5C+F,MAAI,IAEN1C,IAAAC,cAAC2C,IAAI,CACHN,KAAK,WACLE,QAAQ,QACRK,OAAQ/E,EACRgF,KAAMhF,IAERkC,IAAAC,cAAC8C,IAAO,CACNzG,eAAgBA,EAChB0C,UAAWA,EACXgE,QAAQ,EACRC,aAAc,CACZC,OAAQ,OACRC,QAAS3F,EAAMG,QAAQ,GACvByF,aAAc5F,EAAM6F,MAAMD,aAC1BE,UAAW9F,EAAM+F,QAAQ,IAE3BC,WAAYhG,EAAMiG,WAAWC,MAC7BC,UAAW,CACTC,SAAUpG,EAAMiG,WAAWC,MAAME,SACjCC,cAAerG,EAAMiG,WAAWC,MAAMG,cACtCC,WAAYtG,EAAMiG,WAAWC,MAAMI,WACnCC,WAAYvG,EAAMiG,WAAWC,MAAMK,WACnCC,WAAYxG,EAAMiG,WAAWC,MAAMM","file":"static/js/18.ff4495c0.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  Tooltip,\n  ResponsiveContainer,\n  YAxis,\n} from \"recharts\";\nimport format from \"date-fns/format\";\nimport { Card, CardContent, Typography, IconButton, Menu, MenuItem, Box } from \"@mui/material\";\nimport withStyles from '@mui/styles/withStyles';\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\n\nconst styles = (theme) => ({\n  cardContentInner: {\n    marginTop: theme.spacing(-4),\n  },\n});\n\nfunction labelFormatter(label) {\n  return format(new Date(label * 1000), \"MMMM d, p yyyy\");\n}\n\nfunction calculateMin(data, yKey, factor) {\n  let max = Number.POSITIVE_INFINITY;\n  data.forEach((element) => {\n    if (max > element[yKey]) {\n      max = element[yKey];\n    }\n  });\n  return Math.round(max - max * factor);\n}\n\nconst itemHeight = 216;\nconst options = [\"1 Week\", \"1 Month\", \"6 Months\"];\n\nfunction CardChart(props) {\n  const { color, data, title, classes, theme, height } = props;\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedOption, setSelectedOption] = useState(\"1 Month\");\n\n  const handleClick = useCallback(\n    (event) => {\n      setAnchorEl(event.currentTarget);\n    },\n    [setAnchorEl]\n  );\n\n  const formatter = useCallback(\n    (value) => {\n      return [value, title];\n    },\n    [title]\n  );\n\n  const getSubtitle = useCallback(() => {\n    switch (selectedOption) {\n      case \"1 Week\":\n        return \"Last week\";\n      case \"1 Month\":\n        return \"Last month\";\n      case \"6 Months\":\n        return \"Last 6 months\";\n      default:\n        throw new Error(\"No branch selected in switch-statement\");\n    }\n  }, [selectedOption]);\n\n  const processData = useCallback(() => {\n    let seconds;\n    switch (selectedOption) {\n      case \"1 Week\":\n        seconds = 60 * 60 * 24 * 7;\n        break;\n      case \"1 Month\":\n        seconds = 60 * 60 * 24 * 31;\n        break;\n      case \"6 Months\":\n        seconds = 60 * 60 * 24 * 31 * 6;\n        break;\n      default:\n        throw new Error(\"No branch selected in switch-statement\");\n    }\n    const minSeconds = new Date() / 1000 - seconds;\n    const arr = [];\n    for (let i = 0; i < data.length; i += 1) {\n      if (minSeconds < data[i].timestamp) {\n        arr.unshift(data[i]);\n      }\n    }\n    return arr;\n  }, [data, selectedOption]);\n\n  const handleClose = useCallback(() => {\n    setAnchorEl(null);\n  }, [setAnchorEl]);\n\n  const selectOption = useCallback(\n    (selectedOption) => {\n      setSelectedOption(selectedOption);\n      handleClose();\n    },\n    [setSelectedOption, handleClose]\n  );\n\n  const isOpen = Boolean(anchorEl);\n  return (\n    <Card>\n      <Box pt={2} px={2} pb={4}>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <div>\n            <Typography variant=\"subtitle1\">{title}</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              {getSubtitle()}\n            </Typography>\n          </div>\n          <div>\n            <IconButton\n              aria-label=\"More\"\n              aria-owns={isOpen ? \"long-menu\" : undefined}\n              aria-haspopup=\"true\"\n              onClick={handleClick}\n              size=\"large\">\n              <MoreVertIcon />\n            </IconButton>\n            <Menu\n              id=\"long-menu\"\n              anchorEl={anchorEl}\n              open={isOpen}\n              onClose={handleClose}\n              PaperProps={{\n                style: {\n                  maxHeight: itemHeight,\n                  width: 200,\n                },\n              }}\n              disableScrollLock\n            >\n              {options.map((option) => (\n                <MenuItem\n                  key={option}\n                  selected={option === selectedOption}\n                  onClick={() => {\n                    selectOption(option);\n                  }}\n                  name={option}\n                >\n                  {option}\n                </MenuItem>\n              ))}\n            </Menu>\n          </div>\n        </Box>\n      </Box>\n      <CardContent>\n        <Box className={classes.cardContentInner} height={height}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <AreaChart data={processData()} type=\"number\">\n              <XAxis\n                dataKey=\"timestamp\"\n                type=\"number\"\n                domain={[\"dataMin\", \"dataMax\"]}\n                hide\n              />\n              <YAxis\n                domain={[calculateMin(data, \"value\", 0.05), \"dataMax\"]}\n                hide\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"value\"\n                stroke={color}\n                fill={color}\n              />\n              <Tooltip\n                labelFormatter={labelFormatter}\n                formatter={formatter}\n                cursor={false}\n                contentStyle={{\n                  border: \"none\",\n                  padding: theme.spacing(1),\n                  borderRadius: theme.shape.borderRadius,\n                  boxShadow: theme.shadows[1],\n                }}\n                labelStyle={theme.typography.body1}\n                itemStyle={{\n                  fontSize: theme.typography.body1.fontSize,\n                  letterSpacing: theme.typography.body1.letterSpacing,\n                  fontFamily: theme.typography.body1.fontFamily,\n                  lineHeight: theme.typography.body1.lineHeight,\n                  fontWeight: theme.typography.body1.fontWeight,\n                }}\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n\nCardChart.propTypes = {\n  color: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired,\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  height: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(CardChart);\n"],"sourceRoot":""}